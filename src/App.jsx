import React, { useState } from 'react';
import './App.css';

function formatDate(date) {
  const d = new Date(date);
  const day = String(d.getDate()).padStart(2, '0');
  const month = String(d.getMonth() + 1).padStart(2, '0');
  const year = d.getFullYear();
  return `${day}/${month}/${year}`;
}

const motivationLevels = [
  { value: 1, label: '–ú–Ω–µ –≤—Å—ë —Ä–∞–≤–Ω–æ', icon: 'üòï' },
  { value: 2, label: '–ë—É–¥–µ—Ç —Å–ª–æ–∂–Ω–æ', icon: 'ü§î' },
  { value: 3, label: '–ù–µ—Ç –∂–µ–ª–∞–Ω–∏—è, –Ω–æ —è —Å–¥–µ–ª–∞—é', icon: 'üòê' },
  { value: 4, label: '–Ø —á—É–≤—Å—Ç–≤—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å!', icon: 'üòä' },
  { value: 5, label: '–Ø –ø–æ–ª–æ–Ω —ç–Ω–µ—Ä–≥–∏–∏!', icon: 'üî•' },
];

const moodOptions = [
  { emoji: 'üòÉ', label: '–û—Ç–ª–∏—á–Ω–æ' },
  { emoji: 'üôÇ', label: '–•–æ—Ä–æ—à–æ' },
  { emoji: 'üòê', label: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ' },
  { emoji: 'üôÅ', label: '–ì—Ä—É—Å—Ç–Ω–æ' },
  { emoji: 'üò¢', label: '–ü–ª–æ—Ö–æ' },
];

function App() {
  const [motivation, setMotivation] = useState(null);
  const [mood, setMood] = useState(null);
  const [gratitude, setGratitude] = useState('');
  const [goal, setGoal] = useState('');
  const [influence, setInfluence] = useState('');
  const [habits, setHabits] = useState(
    Array(5).fill({ text: '', problem: false, completed: false })
  );
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitted, setSubmitted] = useState(false);
  const today = formatDate(new Date());

  const handleHabitChange = (idx, field, value) => {
    setHabits((habits) =>
      habits.map((h, i) => (i === idx ? { ...h, [field]: value } : h))
    );
  };

  const addHabit = () => {
    if (habits.length < 10) {
      setHabits([...habits, { text: '', problem: false, completed: false }]);
    }
  };

  const removeHabit = (idx) => {
    if (habits.length > 1) {
      setHabits(habits.filter((_, i) => i !== idx));
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    const data = {
      date: today,
      gratitude,
      goal,
      motivation,
      mood,
      influence,
      habits: habits.filter(h => h.text.trim() !== ''),
    };
    
    console.log('–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', data);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    setTimeout(() => {
      setIsSubmitting(false);
      setSubmitted(true);
      
      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      setTimeout(() => {
        setSubmitted(false);
      }, 2000);
    }, 1000);
  };

  return (
    <div className="app-container">
      <form className="habit-journal" onSubmit={handleSubmit}>
        <div className="journal-header">
          <h1 className="journal-title">–î–Ω–µ–≤–Ω–∏–∫ –ø—Ä–∏–≤—ã—á–µ–∫</h1>
          <div className="journal-date">{today}</div>
        </div>
        
        <div className="section">
          <h2 className="section-title">–°–µ–≥–æ–¥–Ω—è –≤—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –∑–∞:</h2>
          <textarea
            rows={2}
            value={gratitude}
            onChange={(e) => setGratitude(e.target.value)}
            placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞ —á—Ç–æ –≤—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã —Å–µ–≥–æ–¥–Ω—è..."
          />
        </div>
        
        <div className="section">
          <h2 className="section-title">–¶–µ–ª—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –ø—Ä–∏–≤—ã—á–∫–∏:</h2>
          <textarea
            rows={2}
            value={goal}
            onChange={(e) => setGoal(e.target.value)}
            placeholder="–û–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å..."
          />
        </div>
        
        <div className="section">
          <h2 className="section-title">–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏:</h2>
          <div className="motivation-options">
            {motivationLevels.map((level) => (
              <label 
                key={level.value}
                className={`motivation-option ${motivation === level.value ? 'selected' : ''}`}
              >
                <input
                  type="radio"
                  name="motivation"
                  checked={motivation === level.value}
                  onChange={() => setMotivation(level.value)}
                />
                <span className="motivation-icon">{level.icon}</span>
                <span className="motivation-label">{level.label}</span>
              </label>
            ))}
          </div>
        </div>
        
        <div className="section">
          <h2 className="section-title">–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:</h2>
          <div className="mood-options">
            {moodOptions.map((option, idx) => (
              <div 
                key={idx} 
                className={`mood-option ${mood === idx ? 'selected' : ''}`}
                onClick={() => setMood(idx)}
              >
                <span className="mood-emoji">{option.emoji}</span>
                <span className="mood-label">{option.label}</span>
              </div>
            ))}
          </div>
        </div>
        
        <div className="section">
          <h2 className="section-title">–ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∞—à—É –ø—Ä–∏–≤—ã—á–∫—É?</h2>
          <textarea
            rows={2}
            value={influence}
            onChange={(e) => setInfluence(e.target.value)}
            placeholder="–°–∏—Ç—É–∞—Ü–∏–∏, –ª—é–¥–∏, —ç–º–æ—Ü–∏–∏, –º—ã—Å–ª–∏ –∏ —Ç.–¥."
          />
        </div>
        
        <div className="section habits-section">
          <div className="section-header">
            <h2 className="section-title">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å</h2>
            <button 
              type="button" 
              className="add-habit-btn"
              onClick={addHabit}
              disabled={habits.length >= 10}
            >
              + –î–æ–±–∞–≤–∏—Ç—å
            </button>
          </div>
          
          <div className="habits-info">
            –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–°–ø–ª—é –Ω–µ –º–µ–Ω–µ–µ 8 —á–∞—Å–æ–≤") –∏ –æ—Ç–º–µ—Ç—å—Ç–µ —Å—Ç–∞—Ç—É—Å:
          </div>
          
          <div className="daily-control">
            {habits.map((habit, i) => (
              <div key={i} className="habit-item">
                <div className="habit-input-group">
                  <input
                    type="text"
                    placeholder={`–ü—Ä–∏–≤—ã—á–∫–∞ ${i + 1}`}
                    value={habit.text}
                    onChange={(e) => handleHabitChange(i, 'text', e.target.value)}
                    className="habit-input"
                  />
                  
                  {habits.length > 1 && (
                    <button 
                      type="button" 
                      className="remove-habit-btn"
                      onClick={() => removeHabit(i)}
                      aria-label="–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É"
                    >
                      ‚úï
                    </button>
                  )}
                </div>
                
                {habit.text.trim() !== '' && (
                  <div className="habit-status">
                    <label className="status-option">
                      <input
                        type="checkbox"
                        checked={habit.completed}
                        onChange={(e) => handleHabitChange(i, 'completed', e.target.checked)}
                      />
                      <span>–í—ã–ø–æ–ª–Ω–µ–Ω–æ</span>
                    </label>
                    
                    <label className="status-option problem">
                      <input
                        type="checkbox"
                        checked={habit.problem}
                        onChange={(e) => handleHabitChange(i, 'problem', e.target.checked)}
                      />
                      <span>–ü—Ä–æ–±–ª–µ–º–∞</span>
                    </label>
                  </div>
                )}
              </div>
            ))}
          </div>
          
          {habits.length >= 10 && (
            <div className="habits-limit-message">
              –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –ø—Ä–∏–≤—ã—á–µ–∫ (10)
            </div>
          )}
        </div>
        
        <div className="form-actions">
          <button 
            type="submit" 
            className={`submit-button ${isSubmitting ? 'submitting' : ''} ${submitted ? 'submitted' : ''}`}
            disabled={isSubmitting || submitted}
          >
            {isSubmitting ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : submitted ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úì' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'}
          </button>
        </div>
      </form>
      
      <footer className="app-footer">
        <p>–î–Ω–µ–≤–Ω–∏–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫ ¬© 2025</p>
      </footer>
    </div>
  );
}

export default App;
