import React, { useState, useEffect } from 'react';
import { submitDailyReport } from '../services/api';
import { useNavigate } from 'react-router-dom';
import NeonSpinner from '../components/NeonSpinner';
import { useTheme } from '../context/ThemeContext';

// Helper function
function formatDate(date) {
  const d = new Date(date);
  const day = String(d.getDate()).padStart(2, '0');
  const month = String(d.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed
  const year = d.getFullYear();
  return `${day}/${month}/${year}`;
}

const motivationLevels = [
  { value: 1, label: '–ú–Ω–µ –≤—Å—ë —Ä–∞–≤–Ω–æ', icon: 'üòï' },
  { value: 2, label: '–ë—É–¥–µ—Ç —Å–ª–æ–∂–Ω–æ', icon: 'ü§î' },
  { value: 3, label: '–ù–µ—Ç –∂–µ–ª–∞–Ω–∏—è, –Ω–æ —è —Å–¥–µ–ª–∞—é', icon: 'üòê' },
  { value: 4, label: '–Ø —á—É–≤—Å—Ç–≤—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å!', icon: 'üòä' },
  { value: 5, label: '–Ø –ø–æ–ª–æ–Ω —ç–Ω–µ—Ä–≥–∏–∏!', icon: 'üî•' },
];

const moodOptions = [
  { emoji: 'üò¢', label: '–ü–ª–æ—Ö–æ' },
  { emoji: 'üôÅ', label: '–ì—Ä—É—Å—Ç–Ω–æ' },
  { emoji: 'üòê', label: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ' },
  { emoji: 'üôÇ', label: '–•–æ—Ä–æ—à–æ' },
  { emoji: 'üòÉ', label: '–û—Ç–ª–∏—á–Ω–æ' },
];

const DailyReportPage = () => {
  const [dailyReport, setDailyReport] = useState(null);
  const [motivation, setMotivation] = useState(null);
  const [mood, setMood] = useState(null);
  const [gratitude, setGratitude] = useState('');
  const [goal, setGoal] = useState('');
  const [influence, setInfluence] = useState('');
  const [habits, setHabits] = useState(
    Array(5).fill({ text: '', problem: false, completed: false })
  );
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitted, setSubmitted] = useState(false);
  const [submitError, setSubmitError] = useState('');
  const today = formatDate(new Date());
  const navigate = useNavigate();
  const { theme } = useTheme();

  const resetForm = () => {
    setMotivation(null);
    setMood(null);
    setGratitude('');
    setGoal('');
    setInfluence('');
    setHabits(Array(5).fill({ text: '', problem: false, completed: false }));
  };

  const handleHabitChange = (idx, field, value) => {
    setHabits((prevHabits) =>
      prevHabits.map((h, i) => (i === idx ? { ...h, [field]: value } : h))
    );
  };

  const addHabit = () => {
    if (habits.length < 10) {
      setHabits([...habits, { text: '', problem: false, completed: false }]);
    }
  };

  const removeHabit = (idx) => {
    if (habits.length > 1) {
      setHabits(habits.filter((_, i) => i !== idx));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setSubmitError('');

    const data = {
      gratitude,
      goal,
      motivation,
      mood: mood !== null ? moodOptions[mood]?.label : null,
      influence,
      habits: habits.filter(h => h.text.trim() !== ''),
    };

    if (data.habits.length === 0) {
      setSubmitError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–∞.');
      setIsSubmitting(false);
      return;
    }
    if (!data.gratitude || !data.goal) {
      setSubmitError('–ü–æ–ª—è "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å" –∏ "–¶–µ–ª—å" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.');
      setIsSubmitting(false);
      return;
    }

    try {
     const submittedData = await submitDailyReport(data);
      setSubmitted(true);
      setSubmitError('');
      setDailyReport(submittedData);
      setTimeout(() => {
        resetForm();
        setSubmitted(false);
        // Potentially navigate to DoneDailyReportPage if it's a separate view now
        // navigate(`/done-report/${submittedData.id}`); // Or however you identify the report
      }, 3000);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:', error);
      setSubmitError(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      setSubmitted(false);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen bg-primary-light-bg dark:bg-primary-dark text-primary-light-text dark:text-white p-4 md:p-8 flex flex-col items-center animate-fadeIn">
      <form className="card w-full max-w-2xl p-6 space-y-6" onSubmit={handleSubmit}>
        <div className="text-center mb-6">
          <h1 className="text-3xl font-bold text-accent-cyan-light dark:text-accent-cyan mb-1">–î–Ω–µ–≤–Ω–∏–∫ –ø—Ä–∏–≤—ã—á–µ–∫</h1>
          <div className="text-lg text-gray-600 dark:text-gray-400">{today}</div>
        </div>

        {/* Gratitude Section */}
        <div className="space-y-2">
          <label htmlFor="gratitude" className="form-label text-lg">–°–µ–≥–æ–¥–Ω—è –≤—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –∑–∞:</label>
          <textarea
            id="gratitude"
            rows="3"
            value={gratitude}
            onChange={(e) => setGratitude(e.target.value)}
            placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞ —á—Ç–æ –≤—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã —Å–µ–≥–æ–¥–Ω—è..."
            className="form-textarea"
          />
        </div>

        {/* Goal Section */}
        <div className="space-y-2">
          <label htmlFor="goal" className="form-label text-lg">–¶–µ–ª—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –ø—Ä–∏–≤—ã—á–∫–∏:</label>
          <textarea
            id="goal"
            rows="3"
            value={goal}
            onChange={(e) => setGoal(e.target.value)}
            placeholder="–û–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å..."
            className="form-textarea"
          />
        </div>

        {/* Motivation Section */}
        <div className="space-y-2">
          <h2 className="form-label text-lg">–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏:</h2>
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">
            {motivationLevels.map((level) => (
              <label
                key={level.value}
                className={`p-3 rounded-md border cursor-pointer transition-all duration-150 flex items-center space-x-3 ${
                  motivation === level.value
                    ? 'bg-accent-cyan-light/20 dark:bg-accent-cyan/20 border-accent-cyan-light dark:border-accent-cyan ring-2 ring-accent-cyan-light dark:ring-accent-cyan'
                    : 'bg-gray-100 dark:bg-gray-700/50 border-gray-300 dark:border-gray-600 hover:bg-gray-200 dark:hover:bg-gray-600/70'
                }`}
              >
                <input
                  type="radio"
                  name="motivation"
                  value={level.value}
                  checked={motivation === level.value}
                  onChange={() => setMotivation(level.value)}
                  className="form-radio" // This class is now theme-aware
                />
                <span className="text-xl">{level.icon}</span>
                <span className="text-gray-700 dark:text-gray-200 text-sm">{level.label}</span>
              </label>
            ))}
          </div>
        </div>

        {/* Mood Section */}
        <div className="space-y-2">
          <h2 className="form-label text-lg">–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:</h2>
          <div className="flex flex-wrap justify-around items-center p-3 bg-gray-100 dark:bg-gray-700/50 rounded-lg gap-2">
            {moodOptions.map((option, idx) => (
              <div
                key={idx}
                className={`p-2 rounded-md cursor-pointer transition-all duration-150 text-center ${
                  mood === idx
                    ? 'bg-accent-fuchsia-light/30 dark:bg-accent-fuchsia/30 ring-2 ring-accent-fuchsia-light dark:ring-accent-fuchsia'
                    : 'hover:bg-gray-200 dark:hover:bg-gray-600/70'
                }`}
                onClick={() => setMood(idx)}
              >
                <span className="text-2xl">{option.emoji}</span>
                <p className={`text-xs mt-1 ${mood === idx ? 'text-accent-fuchsia-light dark:text-accent-fuchsia' : 'text-gray-500 dark:text-gray-400'}`}>{option.label}</p>
              </div>
            ))}
          </div>
        </div>

        {/* Influence Section */}
        <div className="space-y-2">
          <label htmlFor="influence" className="form-label text-lg">–ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∞—à—É –ø—Ä–∏–≤—ã—á–∫—É?</label>
          <textarea
            id="influence"
            rows="3"
            value={influence}
            onChange={(e) => setInfluence(e.target.value)}
            placeholder="–°–∏—Ç—É–∞—Ü–∏–∏, –ª—é–¥–∏, —ç–º–æ—Ü–∏–∏, –º—ã—Å–ª–∏ –∏ —Ç.–¥."
            className="form-textarea"
          />
        </div>

        {/* Habits Section */}
        <div className="space-y-4">
          <div className="flex justify-between items-center">
            <h2 className="text-xl font-semibold text-accent-cyan-light dark:text-accent-cyan">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å</h2>
            <button
              type="button"
              className="btn btn-secondary text-sm" // btn-secondary is theme-aware
              onClick={addHabit}
              disabled={habits.length >= 10}
            >
              + –î–æ–±–∞–≤–∏—Ç—å
            </button>
          </div>

          <p className="text-sm text-gray-600 dark:text-gray-400">
            –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–°–ø–ª—é –Ω–µ –º–µ–Ω–µ–µ 8 —á–∞—Å–æ–≤") –∏ –æ—Ç–º–µ—Ç—å—Ç–µ —Å—Ç–∞—Ç—É—Å:
          </p>

          <div className="space-y-3">
            {habits.map((habit, i) => (
              <div key={i} className="p-4 rounded-md bg-gray-100 dark:bg-gray-800 border border-gray-300 dark:border-gray-700">
                <div className="flex items-center gap-2 mb-2">
                  <input
                    type="text"
                    placeholder={`–ü—Ä–∏–≤—ã—á–∫–∞ ${i + 1}`}
                    value={habit.text}
                    onChange={(e) => handleHabitChange(i, 'text', e.target.value)}
                    className="form-input flex-grow" // form-input is theme-aware
                  />
                  {habits.length > 1 && (
                    <button
                      type="button"
                      className="btn btn-destructive p-2 text-xs" // btn-destructive is theme-aware
                      onClick={() => removeHabit(i)}
                      aria-label="–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É"
                    >
                      ‚úï
                    </button>
                  )}
                </div>

                {habit.text.trim() !== '' && (
                  <div className="flex space-x-4 mt-2">
                    <label className="flex items-center space-x-2 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={habit.completed}
                        onChange={(e) => handleHabitChange(i, 'completed', e.target.checked)}
                        className="form-checkbox" // form-checkbox is theme-aware
                      />
                      <span className="text-gray-700 dark:text-gray-300">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</span>
                    </label>

                    <label className="flex items-center space-x-2 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={habit.problem}
                        onChange={(e) => handleHabitChange(i, 'problem', e.target.checked)}
                        className="form-checkbox" // form-checkbox is theme-aware
                      />
                      <span className="text-gray-700 dark:text-gray-300">–ü—Ä–æ–±–ª–µ–º–∞</span>
                    </label>
                  </div>
                )}
              </div>
            ))}
          </div>

          {habits.length >= 10 && (
            <p className="text-sm text-accent-pink-light dark:text-accent-pink text-center">
              –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –ø—Ä–∏–≤—ã—á–µ–∫ (10)
            </p>
          )}
        </div>

        {submitError && (
          <div className="form-error-message p-3 bg-red-100 dark:bg-red-700/30 text-red-700 dark:text-red-400 rounded-md text-sm text-center">
            {submitError}
          </div>
        )}
        {submitted && !submitError && (
            <div className="p-3 bg-green-100 dark:bg-green-700/30 text-green-700 dark:text-green-400 rounded-md text-sm text-center">
                –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!
            </div>
        )}

        <div className="pt-4">
          <button
            type="submit"
            className={`w-full btn ${isSubmitting || (submitted && !submitError) ? 'btn-disabled' : 'btn-primary'} py-3 text-lg flex items-center justify-center`}
            disabled={isSubmitting || (submitted && !submitError)}
          >
            {isSubmitting ? (
              <>
                <NeonSpinner size="w-5 h-5" color={theme === 'dark' ? 'text-white' : 'text-primary-dark'} />
                <span className="ml-2">–û—Ç–ø—Ä–∞–≤–∫–∞...</span>
              </>
            ) : (submitted && !submitError) ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úì' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'}
          </button>
        </div>
      </form>

      <footer className="mt-8 text-center text-sm text-gray-600 dark:text-gray-500">
        <p>–î–Ω–µ–≤–Ω–∏–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫ ¬© {new Date().getFullYear()}</p>
      </footer>
    </div>
  );
};

export default DailyReportPage;
